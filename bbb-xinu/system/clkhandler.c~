/* clkhandler.c - clkhandler */

#include <xinu.h>
#include "slot_queue.h"

/*-----------------------------------------------------------------------
 * clkhandler - high level clock interrupt handler
 *-----------------------------------------------------------------------
 */
void	clkhandler()
{

	static uint32 count1000 = 1000;	/* variable to count 1000ms */
	volatile struct am335x_timer1ms *csrptr = 0x44E31000;
					/* Pointer to timer CSR	    */
	intmask mask;
	int32 slot;
	struct	arpentry  *arptr;	/* Ptr to ARP cache entry	*/
	/* If there is no interrupt, return */

	if((csrptr->tisr & AM335X_TIMER1MS_TISR_OVF_IT_FLAG) == 0) {
		return;
	}

	/* Acknowledge the interrupt */

	csrptr->tisr = AM335X_TIMER1MS_TISR_OVF_IT_FLAG;

	/* Decrement 1000ms counter */

	count1000--;

	/* After 1 sec, increment clktime */

	if(count1000 == 0) {
		clktime++;
		count1000 = 1000;
	}

	/* check if sleep queue is empty */

	if(!isempty(sleepq)) {

		/* sleepq nonempty, decrement the key of */
		/* topmost process on sleepq		 */

		if((--queuetab[firstid(sleepq)].qkey) == 0) {

			wakeup();
		}
	}
	
	//printf("\nin clock!");
	if(!isemptyslotQ(dlist)){
//	if(frontSlotId(dlist) > 15){
		//printf("\n dlist %d NOT EMPTY!!!\n",dlist);
	//if(frontSlotId(dlist) < NSLOT && frontSlotId(dlist) >= 0){
		//printf("\n ... %d...", firstslotid(dlist));
		
		if((--slottab[firstslotid(dlist)].timestamp) == 0) {
			//printf("\n before calling dequeue. tstamp is %d",slottab[firstslotid(dlist)].timestamp);
			slot = (int32) dequeueslot(dlist);
			//printf("\nTime out occured for slot: %d",slot);
			//printf("\n dlist-> %d",dlist);
			//printf("\n Head-> %d",slotqueuehead(dlist));
			//printf("\n Tail-> %d\n",slotqueuetail(dlist));
			
			mask = disable();
			arp_free(slot);
			restore(mask);
			
		}
		//else{
			//printf("\n Else tstamp is %d",slottab[firstslotid(dlist)].timestamp);
		//}
	}

	/* Decrement the preemption counter */
	/* Reschedule if necessary	    */

	if((--preempt) == 0) {
		preempt = QUANTUM;
		resched();
	}
}
